generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql" // Choose the appropriate database provider (postgresql, mysql, sqlite, etc.)

  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")

  // url = "postgresql://postgres.mdzzujfuovagetltmhrs:lbMQV7p0lNAi9uso@aws-0-us-east-1.pooler.supabase.com:6543/postgres?pgbouncer=true&connect_timeout=300"
  // directUrl = "postgresql://postgres.mdzzujfuovagetltmhrs:lbMQV7p0lNAi9uso@aws-0-us-east-1.pooler.supabase.com:5432/postgres"

  // directUrl = "postgresql://postgres.mdzzujfuovagetltmhrs:lbMQV7p0lNAi9uso@aws-0-us-east-1.pooler.supabase.com:5432/postgres"
  // url      = "postgresql://postgres:mysecretpassword@localhost:5432/mileidysmaids"
}

// Slot Table - Represents available slots that can be booked by customers
model Slot {
  id          Int      @id @default(autoincrement())
  slot_number Int
  date        DateTime
  time        String
  // status      SlotStatus @default(AVAILABLE) // Available or Booked
  booking     Booking? @relation(name: "SlotBooking")

  @@unique([date, time, slot_number]) // Ensures each slot is unique by date, time, and slot number
}

// Enum for Slot Status
enum SlotStatus {
  AVAILABLE
  BOOKED
}

// Customer Table - Stores customer contact information
model Customer {
  id        Int       @id @default(autoincrement())
  full_name String
  phone     String
  email     String    @unique
  bookings  Booking[] // One-to-many relationship with Booking
}

// Service Table - Stores details about the cleaning services offered
model Service {
  id                                 Int                  @id @default(autoincrement())
  cleaning_category                  CleaningCategory
  cleaning_sub_category              CleaningSubCategory?
  bedroom_count                      Int?
  bathroom_count                     Int?
  window_count                       Int?
  oven_count                         Int?
  includes_baseboard_cleaning        Boolean              @default(false)
  includes_kitchen_cabinet_cleaning  Boolean              @default(false)
  includes_bathroom_cabinet_cleaning Boolean              @default(false)
  includes_linen_change              Boolean              @default(false)
  includes_basement                  Boolean              @default(false)
  pet_present                        Boolean              @default(false)
  square_feet                        Int
  package_type                       PackageType?
  service_frequency                  ServiceFrequency
  booking                            Booking?             @relation(name: "ServiceBooking")
  is_recurring                       Boolean?             @default(false)
  has_multiple_toilets               Boolean?             @default(false)
  toilet_count                       Int?
  refrigerator_count                 Int?
  microwave_count                    Int?
  floor_count                        Int?
  cleaning_supplies_provided         Boolean?             @default(false)
  eco_friendly_products              Boolean?             @default(false)
  includes_garage                    Boolean?             @default(false)
  parking_availability               Boolean?             @default(false)
  floor_type                         String? // Adjust type based on your requirements
  special_requests                   String? // Adjust type based on your requirements

  @@index([cleaning_category, cleaning_sub_category]) // For efficient querying by service types
}

// Enums for Service details
enum CleaningCategory {
  RESIDENTIAL
  COMMERCIAL
}

enum CleaningSubCategory {
  HOUSE
  APARTMENT
  OFFICE
}

enum PackageType {
  STANDARD
  DEEP_CLEAN
}

enum ServiceFrequency {
  ONE_TIME
  WEEKLY
  MONTHLY
}

// Address Table - Stores the address information related to a booking
model Address {
  id      Int      @id @default(autoincrement())
  street  String
  unit    String?
  city    String
  state   String
  zip     String
  booking Booking? @relation(name: "AddressBooking")
}

// Booking Table - Links the Customer, Slot, Service, and Address entities together
model Booking {
  id          Int      @id @default(autoincrement())
  customer    Customer @relation(fields: [customer_id], references: [id])
  customer_id Int
  slot        Slot     @relation(name: "SlotBooking", fields: [slot_id], references: [id], onDelete: Cascade)
  slot_id     Int      @unique
  service     Service  @relation(name: "ServiceBooking", fields: [service_id], references: [id])
  service_id  Int      @unique
  address     Address  @relation(name: "AddressBooking", fields: [address_id], references: [id])
  address_id  Int      @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
